//  Package todo is an App Engine app providing a REST API to manage todo
//  lists.
//
//  The REST API provides the following handlers:
//
//  /api/lists GET
//    Gets all the list names and ids and creators if no user is logged in.
//    If the user is logged in, only their lists.
//  /api/lists POST
//    Creates a new list.
//
package todo

import (
	"encoding/json"
	//"errors"
	"fmt"
	"io"
	"net/http"

	"github.com/gorilla/mux"

	"appengine"
	"appengine/datastore"
)

// datastore entity kind for List
const listKind = "List"

// List represents a lists of tasks.
type List struct {
	// Autogenerated id, not stored in the datastore.
	ID string `datastore:"-"`

	Name string // Name of the list
}

func init() {
	// Register all the handlers.
	r := mux.NewRouter().PathPrefix("/api/").Subrouter()

	// List management
	r.Handle("/list", appHandler(getAllLists)).Methods("GET")
	r.Handle("/list", appHandler(createLists)).Methods("POST")
	r.Handle("/list/{list}", appHandler(getList)).Methods("GET")
	r.Handle("/list/{list}", appHandler(deleteList)).Methods("DELETE")

	http.Handle("/api/", r)
}

// getAllLists fetches all the lists in the datastore and encodes them
// in JSON format into the http response.
func getAllLists(w io.Writer, r *http.Request) error {

	c := appengine.NewContext(r)
	// Create a slice of List.
	lists := []List{}

	// Create a new datastore.Query and fetch all the lists from the datastore.
	// - datastore.NewQuery: http://golang.org/s/datastore#NewQuery
	query := datastore.NewQuery("Lists")
	keys, err := query.GetAll(c, &lists)

	if err != nil {
		return err
	}

	// Update the encoded keys and encode the lists.
	// - datastore.Key.Encode: http://golang.org/s/datastore#Key.Encode
	for i, key := range keys {
		fmt.Println(key)
		lists[i].ID = key.Encode()
	}

	// Create a JSON encoder and encode the slice of lists into the provided
	// io.Writer.
	// If encoding the list fails return the error.
	// - json.Encoder: http://golang.org/pkg/encoding/json#Encoder
	enc := json.NewEncoder(w)
	return enc.Encode(lists)
}

func createLists(w io.Writer, r *http.Request) error {
	c := appengine.NewContext(r)
	list := List{}

	dec := json.NewDecoder(r.Body)
	err := dec.Decode(&list)

	if err != nil {
		return appErrorf(http.StatusInternalServerError, "Error in decoding:%v", err)
	}
	if list.Name == "" {
		return appErrorf(http.StatusBadRequest, "Missing list name")
	}

	key := datastore.NewIncompleteKey(c, listKind, nil)

	key, err = datastore.Put(c, key, &list)

	if err != nil {
		return appErrorf(http.StatusBadRequest, "Error in Datastore put: %v", err)
	}

	list.ID = key.Encode()

	return json.NewEncoder(w).Encode(list)
}

func getList(w io.Writer, r *http.Request) error {
	c := appengine.NewContext(r)
	list := List{}

	vars := mux.Vars(r)
	encodedListID := vars["list"]

	key, _ := datastore.DecodeKey(encodedListID)

	err := datastore.Get(c, key, &list)

	if err == datastore.ErrNoSuchEntity || err != nil {
		return appErrorf(http.StatusBadRequest, "Error in datastore get:%v", err)
	}

	list.ID = key.Encode()
	return json.NewEncoder(w).Encode(list)
}

func deleteList(w io.Writer, r *http.Request) error {
	c := appengine.NewContext(r)

	vars := mux.Vars(r)
	encodedListID := vars["list"]

	key, _ := datastore.DecodeKey(encodedListID)

	return datastore.Delete(c, key)

}
